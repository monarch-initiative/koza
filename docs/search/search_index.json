{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Koza","text":""},{"location":"#a-data-transformation-framework-in-python","title":"A data transformation framework in Python","text":""},{"location":"#overview","title":"Overview","text":"<p>Koza is a data transformation framework which allows you to write semi-declarative \"ingests\"</p> <ul> <li>Transform csv, json, yaml, jsonl, or xml source data, converting them to a target csv, json, or jsonl format based on your dataclass model.  </li> <li>Koza also can output data in the KGX format</li> <li>Write data transforms in semi-declarative Python</li> <li>Configure source files, expected columns/json properties and path filters, field filters, and metadata in yaml</li> <li>Create or import mapping files to be used in ingests (eg. id mapping, type mappings)</li> <li>Create and use translation tables to map between source and target vocabularies</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>Koza is available on PyPi and can be installed via pip: <pre><code>pip install koza\n</code></pre></p>"},{"location":"#usage","title":"Usage","text":"<p>See the Ingests page for information on how to configure ingests for koza to use.</p> <p>Koza can be used as a Python library, or via the command line. CLI commands are available for validating and transforming data. See the Module page for information on using Koza as a library.</p> <p>Koza also includes some examples to help you get started (see <code>koza/examples</code>).</p>"},{"location":"#basic-examples","title":"Basic Examples","text":"<p>Validate</p> <p>Give Koza a local or remote csv file, and get some basic information (headers, number of rows)</p> <pre><code>koza validate \\\n  --file ./examples/data/string.tsv \\\n  --delimiter ' '\n</code></pre> <p>Sending a json or jsonl formatted file will confirm if the file is valid json or jsonl</p> <pre><code>koza validate \\\n  --file ./examples/data/ZFIN_PHENOTYPE_0.jsonl.gz \\\n  --format jsonl\n</code></pre> <pre><code>koza validate \\\n  --file ./examples/data/ddpheno.json.gz \\\n  --format json\n</code></pre> <p>Transform</p> <p>Try one of Koza's example ingests: <pre><code>koza transform \\\n  --source examples/string-declarative/protein-links-detailed.yaml \\\n  --global-table examples/translation_table.yaml\n</code></pre></p> <p>Note:    Koza expects a directory structure as described in the above example   with the source config file and transform code in the same directory   (these files can also simply be named <code>transform.yaml</code> and <code>transform.py</code>, as is default):    <pre><code>.\n\u251c\u2500\u2500 ...\n\u2502   \u251c\u2500\u2500 some_source\n\u2502   \u2502   \u251c\u2500\u2500 your_ingest.yaml\n\u2502   \u2502   \u2514\u2500\u2500 your_ingest.py\n\u2502   \u2514\u2500\u2500 some_translation_table.yaml\n\u2514\u2500\u2500 ...\n</code></pre></p>"},{"location":"Ingests/","title":"Configuring an Ingest","text":"<p><sub> (For CLI usage, see the CLI commands page.) </sub> </p> <p>Koza is designed to process and transform existing data into a target csv/json/jsonl format.  </p> <p>This process is internally known as an ingest. Ingests are defined by:  </p> <ol> <li>Source config yaml: Ingest configuration, including:<ul> <li>metadata, formats, required columns, any SSSOM files, etc. </li> </ul> </li> <li>Map config yaml: (Optional) configures creation of mapping dictionary  </li> <li>Transform code: a Python script, with specific transform instructions </li> </ol>"},{"location":"Ingests/koza_config/","title":"Koza Configuration (KozaConfig)","text":"<p>This document describes the KozaConfig model introduced in Koza 2, which replaces the previous SourceConfig structure. The KozaConfig provides a comprehensive configuration system for data ingests with support for multiple readers, transforms, and writers.</p> <p>Paths are relative to the directory from which you execute Koza.</p>"},{"location":"Ingests/koza_config/#overview","title":"Overview","text":"<p>KozaConfig is the main configuration class that defines how Koza processes your data. It consists of several main sections:</p> <ul> <li>name: Unique identifier for your ingest</li> <li>reader/readers: Configuration for input data sources  </li> <li>transform: Configuration for data transformation logic</li> <li>writer: Configuration for output format and properties</li> <li>metadata: Optional metadata about the dataset</li> </ul>"},{"location":"Ingests/koza_config/#basic-structure","title":"Basic Structure","text":"<pre><code>name: 'my-ingest'\nreader: # OR readers: for multiple sources\n  # reader configuration\ntransform:\n  # transformation configuration  \nwriter:\n  # output configuration\nmetadata: # optional\n  # metadata configuration\n</code></pre>"},{"location":"Ingests/koza_config/#core-configuration-properties","title":"Core Configuration Properties","text":""},{"location":"Ingests/koza_config/#required-properties","title":"Required Properties","text":"Property Type Description <code>name</code> string Name of the data ingest, should be unique and descriptive"},{"location":"Ingests/koza_config/#optional-properties","title":"Optional Properties","text":"Property Type Description <code>reader</code> ReaderConfig Single reader configuration (mutually exclusive with <code>readers</code>) <code>readers</code> dict[str, ReaderConfig] Named multiple readers (mutually exclusive with <code>reader</code>) <code>transform</code> TransformConfig Transform configuration (optional, uses defaults if not specified) <code>writer</code> WriterConfig Writer configuration (optional, uses defaults if not specified) <code>metadata</code> DatasetDescription | string Dataset metadata or path to metadata file"},{"location":"Ingests/koza_config/#reader-configuration","title":"Reader Configuration","text":"<p>Readers define how Koza processes input data files. You can use either a single <code>reader</code> or multiple named <code>readers</code>.</p>"},{"location":"Ingests/koza_config/#single-reader-example","title":"Single Reader Example","text":"<pre><code>reader:\n  format: csv\n  files:\n    - 'data/input.tsv'\n  delimiter: '\\t'\n</code></pre>"},{"location":"Ingests/koza_config/#multiple-readers-example","title":"Multiple Readers Example","text":"<pre><code>readers:\n  main_data:\n    format: csv\n    files:\n      - 'data/main.tsv'\n    delimiter: '\\t'\n  reference_data:\n    format: json\n    files:\n      - 'data/reference.json'\n</code></pre>"},{"location":"Ingests/koza_config/#base-reader-properties","title":"Base Reader Properties","text":"<p>All reader types support these common properties:</p> Property Type Description <code>files</code> list[string] List of input files to process <code>filters</code> list[ColumnFilter] List of filters to apply to data"},{"location":"Ingests/koza_config/#csv-reader-configuration","title":"CSV Reader Configuration","text":"<p>For CSV format files (<code>format: csv</code>):</p> Property Type Default Description <code>format</code> string <code>csv</code> Must be \"csv\" <code>columns</code> list[string | dict] None Column names or name/type mappings <code>field_type_map</code> dict[string, FieldType] None Mapping of column names to types <code>delimiter</code> string <code>\\t</code> Field delimiter (supports \"tab\", \"\\t\", or literal chars) <code>header_delimiter</code> string None Different delimiter for header row <code>dialect</code> string <code>excel</code> CSV dialect <code>header_mode</code> int | HeaderMode <code>infer</code> Header handling: int (0-based row), \"infer\", or \"none\" <code>header_prefix</code> string None Prefix for header processing <code>skip_blank_lines</code> bool <code>true</code> Whether to skip blank lines <code>comment_char</code> string <code>#</code> Character that indicates comments"},{"location":"Ingests/koza_config/#field-types","title":"Field Types","text":"<ul> <li><code>str</code> - String type (default)</li> <li><code>int</code> - Integer type  </li> <li><code>float</code> - Float type</li> </ul>"},{"location":"Ingests/koza_config/#header-modes","title":"Header Modes","text":"<ul> <li><code>infer</code> - Automatically detect header row</li> <li><code>none</code> - No header row present</li> <li>Integer (0-based) - Specific header row index</li> </ul>"},{"location":"Ingests/koza_config/#column-definition-examples","title":"Column Definition Examples","text":"<pre><code># Simple string columns\ncolumns:\n  - 'gene_id'\n  - 'symbol'\n  - 'score'\n\n# Mixed types  \ncolumns:\n  - 'gene_id'\n  - 'symbol' \n  - 'score': 'int'\n  - 'p_value': 'float'\n</code></pre>"},{"location":"Ingests/koza_config/#json-reader-configuration","title":"JSON Reader Configuration","text":"<p>For JSON format files (<code>format: json</code>):</p> Property Type Description <code>format</code> string Must be \"json\" <code>required_properties</code> list[string] Properties that must be present <code>json_path</code> list[string | int] Path to data within JSON structure"},{"location":"Ingests/koza_config/#jsonl-reader-configuration","title":"JSONL Reader Configuration","text":"<p>For JSON Lines format files (<code>format: jsonl</code>):</p> Property Type Description <code>format</code> string Must be \"jsonl\" <code>required_properties</code> list[string] Properties that must be present"},{"location":"Ingests/koza_config/#yaml-reader-configuration","title":"YAML Reader Configuration","text":"<p>For YAML format files (<code>format: yaml</code>):</p> Property Type Description <code>format</code> string Must be \"yaml\" <code>required_properties</code> list[string] Properties that must be present <code>json_path</code> list[string | int] Path to data within YAML structure"},{"location":"Ingests/koza_config/#column-filters","title":"Column Filters","text":"<p>Filters allow you to include or exclude rows based on column values.</p>"},{"location":"Ingests/koza_config/#filter-types","title":"Filter Types","text":""},{"location":"Ingests/koza_config/#comparison-filters","title":"Comparison Filters","text":"<p>For numeric comparisons:</p> <pre><code>filters:\n  - inclusion: 'include'  # or 'exclude'\n    column: 'score'\n    filter_code: 'gt'     # gt, ge, lt, le  \n    value: 500\n</code></pre>"},{"location":"Ingests/koza_config/#equality-filters","title":"Equality Filters","text":"<p>For exact matches:</p> <pre><code>filters:\n  - inclusion: 'include'\n    column: 'status'\n    filter_code: 'eq'     # eq, ne\n    value: 'active'\n</code></pre>"},{"location":"Ingests/koza_config/#list-filters","title":"List Filters","text":"<p>For checking membership in lists:</p> <pre><code>filters:\n  - inclusion: 'include'\n    column: 'category'\n    filter_code: 'in'     # in, in_exact\n    value: ['A', 'B', 'C']\n</code></pre>"},{"location":"Ingests/koza_config/#filter-codes","title":"Filter Codes","text":"<ul> <li><code>gt</code> - Greater than</li> <li><code>ge</code> - Greater than or equal  </li> <li><code>lt</code> - Less than</li> <li><code>le</code> - Less than or equal</li> <li><code>eq</code> - Equal to</li> <li><code>ne</code> - Not equal to</li> <li><code>in</code> - In list (case insensitive)</li> <li><code>in_exact</code> - In list (exact match)</li> </ul>"},{"location":"Ingests/koza_config/#transform-configuration","title":"Transform Configuration","text":"<p>The transform section configures how data is processed and transformed.</p> Property Type Default Description <code>code</code> string None Path to Python transform file <code>module</code> string None Python module to import <code>global_table</code> string | dict None Global translation table <code>local_table</code> string | dict None Local translation table <code>mappings</code> list[string] <code>[]</code> List of mapping files <code>on_map_failure</code> MapErrorEnum <code>warning</code> How to handle mapping failures <code>extra_fields</code> dict <code>{}</code> Additional custom fields"},{"location":"Ingests/koza_config/#map-error-handling","title":"Map Error Handling","text":"<ul> <li><code>warning</code> - Log warnings for mapping failures</li> <li><code>error</code> - Raise errors for mapping failures</li> </ul>"},{"location":"Ingests/koza_config/#example-transform-configuration","title":"Example Transform Configuration","text":"<pre><code>transform:\n  code: 'transform.py'\n  global_table: 'tables/global_mappings.yaml'\n  local_table: 'tables/local_mappings.yaml'\n  mappings:\n    - 'mappings/gene_mappings.yaml'\n  on_map_failure: 'warning'\n  custom_param: 'value'  # Goes into extra_fields\n</code></pre>"},{"location":"Ingests/koza_config/#writer-configuration","title":"Writer Configuration","text":"<p>The writer section configures output format and properties.</p> Property Type Default Description <code>format</code> OutputFormat <code>tsv</code> Output format <code>sssom_config</code> SSSOMConfig None SSSOM mapping configuration <code>node_properties</code> list[string] None Node properties to include <code>edge_properties</code> list[string] None Edge properties to include <code>min_node_count</code> int None Minimum nodes required <code>min_edge_count</code> int None Minimum edges required"},{"location":"Ingests/koza_config/#output-formats","title":"Output Formats","text":"<ul> <li><code>tsv</code> - Tab-separated values</li> <li><code>jsonl</code> - JSON Lines  </li> <li><code>kgx</code> - KGX format</li> <li><code>passthrough</code> - Pass data through unchanged</li> </ul>"},{"location":"Ingests/koza_config/#example-writer-configuration","title":"Example Writer Configuration","text":"<pre><code>writer:\n  format: tsv\n  node_properties:\n    - 'id'\n    - 'category'\n    - 'name'\n  edge_properties:\n    - 'id'\n    - 'subject'\n    - 'predicate'\n    - 'object'\n    - 'category'\n</code></pre>"},{"location":"Ingests/koza_config/#sssom-configuration","title":"SSSOM Configuration","text":"<p>SSSOM (Simple Standard for Sharing Ontological Mappings) integration:</p> Property Type Description <code>files</code> list[string] SSSOM mapping files <code>filter_prefixes</code> list[string] Prefixes to filter by <code>subject_target_prefixes</code> list[string] Subject mapping prefixes <code>object_target_prefixes</code> list[string] Object mapping prefixes <code>use_match</code> list[Match] Match types to use"},{"location":"Ingests/koza_config/#match-types","title":"Match Types","text":"<ul> <li><code>exact</code> - Exact matches</li> <li><code>narrow</code> - Narrow matches  </li> <li><code>broad</code> - Broad matches</li> </ul> <pre><code>writer:\n  sssom_config:\n    files:\n      - 'mappings/ontology_mappings.sssom.tsv'\n    subject_target_prefixes: ['MONDO']\n    object_target_prefixes: ['HP', 'GO']\n    use_match: ['exact']\n</code></pre>"},{"location":"Ingests/koza_config/#metadata-configuration","title":"Metadata Configuration","text":"<p>Metadata can be defined inline or loaded from a separate file.</p>"},{"location":"Ingests/koza_config/#inline-metadata","title":"Inline Metadata","text":"<pre><code>metadata:\n  name: 'My Data Source'\n  description: 'Description of the data and processing'\n  ingest_title: 'Source Database Name'\n  ingest_url: 'https://source-database.org'\n  provided_by: 'my_source_gene_disease'\n  rights: 'https://source-database.org/license'\n</code></pre>"},{"location":"Ingests/koza_config/#external-metadata-file","title":"External Metadata File","text":"<pre><code>metadata: './metadata.yaml'\n</code></pre>"},{"location":"Ingests/koza_config/#metadata-properties","title":"Metadata Properties","text":"Property Type Description <code>name</code> string Human-readable name of data source <code>ingest_title</code> string Title of data source (maps to biolink name) <code>ingest_url</code> string URL of data source (maps to biolink iri) <code>description</code> string Description of data/ingest process <code>provided_by</code> string Source identifier, format: <code>&lt;source&gt;_&lt;type&gt;</code> <code>rights</code> string License/rights information URL"},{"location":"Ingests/koza_config/#complete-example","title":"Complete Example","text":"<p>Here's a comprehensive example showing all major configuration options:</p> <pre><code>name: 'comprehensive-example'\n\nmetadata:\n  name: 'Example Database'\n  description: 'Comprehensive example of Koza configuration'\n  ingest_title: 'Example DB'\n  ingest_url: 'https://example-db.org'\n  provided_by: 'example_gene_disease'\n  rights: 'https://example-db.org/license'\n\nreader:\n  format: csv\n  files:\n    - 'data/genes.tsv'\n    - 'data/diseases.tsv'\n  delimiter: '\\t'\n  columns:\n    - 'gene_id'\n    - 'gene_symbol'\n    - 'disease_id'\n    - 'confidence': 'float'\n  filters:\n    - inclusion: 'include'\n      column: 'confidence'\n      filter_code: 'ge'\n      value: 0.7\n    - inclusion: 'exclude'\n      column: 'gene_symbol'\n      filter_code: 'eq'\n      value: 'DEPRECATED'\n\ntransform:\n  code: 'transform.py'\n  global_table: 'tables/global_mappings.yaml'\n  on_map_failure: 'warning'\n\nwriter:\n  format: tsv\n  node_properties:\n    - 'id'\n    - 'category'\n    - 'name'\n    - 'provided_by'\n  edge_properties:\n    - 'id'\n    - 'subject'\n    - 'predicate'\n    - 'object'\n    - 'category'\n    - 'provided_by'\n    - 'confidence'\n  min_node_count: 100\n  min_edge_count: 50\n</code></pre>"},{"location":"Ingests/koza_config/#migration-from-sourceconfig","title":"Migration from SourceConfig","text":"<p>If you're migrating from the old SourceConfig format to KozaConfig:</p> <ol> <li>Structure Changes: </li> <li>Top-level properties are now organized under <code>reader</code>, <code>transform</code>, and <code>writer</code> sections</li> <li><code>files</code> moves to <code>reader.files</code></li> <li>Transform-related properties move to <code>transform</code> section</li> <li> <p>Output properties move to <code>writer</code> section</p> </li> <li> <p>Property Mapping:</p> </li> <li><code>transform_code</code> \u2192 <code>transform.code</code></li> <li><code>global_table</code> \u2192 <code>transform.global_table</code> </li> <li><code>local_table</code> \u2192 <code>transform.local_table</code></li> <li><code>node_properties</code> \u2192 <code>writer.node_properties</code></li> <li> <p><code>edge_properties</code> \u2192 <code>writer.edge_properties</code></p> </li> <li> <p>New Features:</p> </li> <li>Multiple readers support with <code>readers</code></li> <li>Enhanced filter system with more comparison operators</li> <li>SSSOM integration in writer</li> <li>Improved metadata handling</li> </ol> <p>Next Steps: Transform Code</p>"},{"location":"Ingests/mapping/","title":"Mapping","text":"<p>Mapping with Koza is optional, but can be done in two ways:  </p> <ul> <li>Automated mapping with SSSOM files  </li> <li>Manual mapping with a map config yaml</li> </ul>"},{"location":"Ingests/mapping/#sssom-mapping","title":"SSSOM Mapping","text":"<p>Koza supports mapping with SSSOM files (Semantic Similarity of Source and Target Ontology Mappings). Simply add the path to the SSSOM file to your source config, the desired target prefixes, and any prefixes you want to use to filter the SSSOM file. Koza will automatically create a mapping lookup table which will automatically attempt to map any values in the source file to an ID with the target prefix.</p> <pre><code>sssom_config:\n    sssom_file: './path/to/your_mapping_file.sssom.tsv'\n    filter_prefixes: \n        - 'SOMEPREFIX'\n        - 'OTHERPREFIX'\n    target_prefixes: \n        - 'OTHERPREFIX'\n    use_match:\n        - 'exact'\n</code></pre> <p>Note: Currently, only the <code>exact</code> match type is supported (<code>narrow</code> and <code>broad</code> match types will be added in the future).</p>"},{"location":"Ingests/mapping/#manual-mapping-additional-data","title":"Manual Mapping / Additional Data","text":"<p>The map config yaml allows you to include data from other sources in your ingests, which may have different columns or formats.  </p> <p>If you don't have an SSSOM file, or you want to manually map some values, you can use a map config yaml. You can then add this map to your source config yaml in the <code>depends_on</code> property.  </p> <p>Koza will then create a nested dictionary with the specified key and values. For example, the following map config yaml maps values from the <code>STRING</code> column to the <code>entrez</code> and <code>NCBI taxid</code> columns.</p> <pre><code># koza/examples/maps/entrez-2-string.yaml\nname: ...\nfiles: ...\n\ncolumns:\n- 'NCBI taxid'\n- 'entrez'\n- 'STRING'\n\nkey: 'STRING'\n\nvalues:\n- 'entrez'\n- 'NCBI taxid'\n</code></pre> <p>The mapping dict will be available in your transform script from the <code>koza_app</code> object (see the Transform Code section below).</p> <p>Next Steps: Transform Code</p>"},{"location":"Ingests/testing/","title":"Testing","text":"<p>Koza includes a <code>mock_koza</code> fixture (see <code>src/koza/utils/testing_utils</code>) that can be used to test your ingest configuration. This fixture accepts the following arguments:</p> Argument Type Description Required Arguments <code>name</code> <code>str</code> The name of the ingest <code>data</code> <code>Union[Dict, List[Dict]]</code> The data to be ingested <code>transform_code</code> <code>str</code> Path to the transform code to be used Optional Arguments <code>map_cache</code> <code>Dict</code> Map cache to be used <code>filters</code> <code>List(str)</code> List of filters to apply to data <code>global_table</code> <code>str</code> Path to the global table <code>local_table</code> <code>str</code> Path to the local table <p>The <code>mock_koza</code> fixture returns a list of entities that would be generated by the ingest configuration. This list can then be used to test the output based on the transform script.</p> <p>Here is an example of how to use the <code>mock_koza</code> fixture to test an ingest configuration:</p> <pre><code>import pytest\n\nfrom koza.utils.testing_utils import mock_koza\n\n# Define the source name and transform script path\nINGEST_NAME = \"your_ingest_name\"\nTRANSFORM_SCRIPT = \"./src/{{cookiecutter.__project_slug}}/transform.py\"\n\n# Define an example row to test (as a dictionary)\n@pytest.fixture\ndef example_row():\n    return {\n        \"example_column_1\": \"entity_1\",\n        \"example_column_2\": \"entity_6\",\n        \"example_column_3\": \"biolink:related_to\",\n    }\n\n# Or a list of rows\n@pytest.fixture\ndef example_list_of_rows():\n    return [\n        {\n            \"example_column_1\": \"entity_1\",\n            \"example_column_2\": \"entity_6\",\n            \"example_column_3\": \"biolink:related_to\",\n        },\n        {\n            \"example_column_1\": \"entity_2\",\n            \"example_column_2\": \"entity_7\",\n            \"example_column_3\": \"biolink:related_to\",\n        },\n    ]\n\n# Define the mock koza transform\n@pytest.fixture\ndef mock_transform(mock_koza, example_row):\n    return mock_koza(\n        INGEST_NAME,\n        example_row,\n        TRANSFORM_SCRIPT,\n    )\n\n# Or for multiple rows\n@pytest.fixture\ndef mock_transform_multiple_rows(mock_koza, example_list_of_rows):\n    return mock_koza(\n        INGEST_NAME,\n        example_list_of_rows,\n        TRANSFORM_SCRIPT,\n    )\n\n# Test the output of the transform\n\ndef test_single_row(mock_transform):\n    assert len(mock_transform) == 1\n    entity = mock_transform[0]\n    assert entity\n    assert entity.subject == \"entity_1\"\n\n\ndef test_multiple_rows(mock_transform_multiple_rows):\n    assert len(mock_transform_multiple_rows) == 2\n    entity_1 = mock_transform_multiple_rows[0]\n    entity_2 = mock_transform_multiple_rows[1]\n    assert entity_1.subject == \"entity_1\"\n    assert entity_2.subject == \"entity_2\"\n</code></pre>"},{"location":"Ingests/transform/","title":"Transform Code","text":"<p>This Python script is where you'll define the specific steps of your data transformation. Koza will load this script and execute it for each row of data in your source file, applying any filters and mapping as defined in your source config yaml, and outputting the transformed data to the target csv/json/jsonl file.</p> <p>When Koza is called, either by command-line or as a library, it creates a <code>KozaTransform</code> object for the specified ingest. This KozaTransform will be your entry point to Koza and is available as a global variable in your transform code.</p> <p>The KozaTransform object has the following methods which can be used in your transform code:</p> Method Description <code>write(*args)</code> Writes the transformed data to the target file <p>Your transform code should define functions decorated with Koza decorators that process the data:</p> <p>Once you have processed a row of data, and created a biolink entity node or edge object (or both), you can pass these to <code>koza.write()</code> to output the transformed data to the target file.</p> Example Python Transform Script <pre><code>import re\nimport uuid\nfrom typing import Any\nfrom biolink_model.datamodel.pydanticmodel_v2 import PairwiseGeneToGeneInteraction, Protein\n\nimport koza\n\n@koza.transform_record()\ndef transform_record(koza: koza.KozaTransform, record: dict[str, Any]):\n    # Process the record data\n    protein_a = Protein(id=\"ENSEMBL:\" + re.sub(r\"\\d+\\.\", \"\", record[\"protein1\"]))\n    protein_b = Protein(id=\"ENSEMBL:\" + re.sub(r\"\\d+\\.\", \"\", record[\"protein2\"]))\n\n    # Create interaction\n    pairwise_gene_to_gene_interaction = PairwiseGeneToGeneInteraction(\n        id=\"uuid:\" + str(uuid.uuid1()),\n        subject=protein_a.id,\n        object=protein_b.id,\n        predicate=\"biolink:interacts_with\",\n        knowledge_level=\"not_provided\",\n        agent_type=\"not_provided\",\n    )\n\n    # Write the transformed data\n    koza.write(protein_a, protein_b, pairwise_gene_to_gene_interaction)\n</code></pre> <p>The <code>@koza.transform_record()</code> decorator indicates that this function processes individual records. If you pass nodes as well as edges to <code>koza.write()</code>, Koza will automatically create a node file and an edge file. If you pass only nodes, Koza will create only a node file, and if you pass only edges, Koza will create only an edge file.</p>"},{"location":"Usage/CLI/","title":"<code>koza</code>","text":"<p>Usage:</p> <pre><code>$ koza [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <ul> <li><code>--version</code></li> <li><code>--install-completion</code>: Install completion for the current shell.</li> <li><code>--show-completion</code>: Show completion for the current shell, to copy it or customize the installation.</li> <li><code>--help</code>: Show this message and exit.</li> </ul> <p>Commands:</p> <ul> <li><code>transform</code>: Transform a source file</li> </ul>"},{"location":"Usage/CLI/#koza-transform","title":"<code>koza transform</code>","text":"<p>Transform a source file</p> <p>Usage:</p> <pre><code>$ koza transform [OPTIONS] CONFIGURATION_YAML\n</code></pre> <p>Arguments:</p> <ul> <li><code>CONFIGURATION_YAML</code>: Configuration YAML file  [required]</li> </ul> <p>Options:</p> <ul> <li><code>-i, --input-file TEXT</code>: Override input files</li> <li><code>-o, --output-dir TEXT</code>: Path to output directory  [default: ./output]</li> <li><code>-f, --output-format [tsv|jsonl|kgx|passthrough]</code>: Output format  [default: tsv]</li> <li><code>-n, --limit INTEGER</code>: Number of rows to process (if skipped, processes entire source file)  [default: 0]</li> <li><code>-p, --progress</code>: Display progress of transform</li> <li><code>-q, --quiet</code>: Disable log output</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"Usage/Module/","title":"Module","text":""}]}